/**
 * Generated by Muki
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 *
 */
#import "XmlSerializer.h"
#import "JsonSerializer.h"
#import "JsonDeserializer.h"
#import "NSDataBase64.h"
#import "MukiControllerStub.h"

@implementation MukiControllerStub

#define STATUS_NOT_FOUND  404
#define STATUS_NO_CONTENT 204

- (id)initControllerUrl: (NSString *)aUrl {
    self = [super init];
	self.controllerUrl = aUrl;
	self.authorizationHeader = nil;
	return self;
}

- (id)initControllerUrl: (NSString *)aUrl userName:(NSString *)aName password:(NSString *)aPassword {
    self = [super init];
    self.controllerUrl = aUrl;
    self.userName = aName;
    self.password = aPassword;
    if(self.userName == nil || self.password == nil) {
        self.authorizationHeader = nil;
        return self;
	}
	NSMutableString *loginString = (NSMutableString*)[@"" stringByAppendingFormat:@"%@:%@", self.userName, self.password];
	NSData *loginData = [loginString dataUsingEncoding:NSASCIIStringEncoding];
	NSString *base64Login = [loginData base64EncodedString];
	self.authorizationHeader = [@"Basic " stringByAppendingFormat:@"%@", base64Login];
    return self;
}

- (NSString*)doGetInvocation: (NSString *)targetUrl contentType: (NSString *)contentType error:(NSError **)error {
	NSURL *url = [NSURL URLWithString: targetUrl];
	NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL: url];
	request.HTTPMethod = @"GET";
	[request setValue:contentType forHTTPHeaderField: @"Content-type"];
	if(self.authorizationHeader != nil) {
        [request setValue:self.authorizationHeader forHTTPHeaderField:@"Authorization"];
	}
	
	NSHTTPURLResponse *response;
    NSError *localError;
	NSData *data = [NSURLConnection sendSynchronousRequest: request returningResponse: &response error: &localError];
    NSInteger code = response.statusCode;
    if (code == STATUS_NOT_FOUND || data == nil) {
        *error = localError;
        return nil;
    }
	NSString *reply = [[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding];
	return reply;
}

- (NSString*)doPostInvocation: (NSString *)targetUrl body: (NSString *)messageBody contentType: (NSString *)contentType error:(NSError **)error {
	NSURL *url = [NSURL URLWithString: targetUrl];
	NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL: url];
	request.HTTPMethod = @"POST";
	[request setValue:contentType forHTTPHeaderField: @"Content-type"];
	if(self.authorizationHeader != nil) {
        [request setValue:self.authorizationHeader forHTTPHeaderField:@"Authorization"];
	}
	
	if(messageBody != nil) {
		NSData *body = [messageBody dataUsingEncoding: NSUTF8StringEncoding];
		request.HTTPBody = body;
	}
	
	NSHTTPURLResponse *response;
    NSError *localError;
	NSData *data = [NSURLConnection sendSynchronousRequest: request returningResponse: &response error: &localError];
    NSInteger code = response.statusCode;
    if (code == STATUS_NO_CONTENT || data == nil) {
        *error = localError;
        return nil;
    }
	NSString *reply = [[NSString alloc] initWithData: data encoding:NSUTF8StringEncoding];
	return reply;
}

- (NSString*)doPutInvocation: (NSString *)targetUrl body: (NSString *)messageBody contentType: (NSString *)contentType error:(NSError **)error {
	NSURL *url = [NSURL URLWithString: targetUrl];
	NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL: url];
	request.HTTPMethod = @"PUT";
	[request setValue:contentType forHTTPHeaderField: @"Content-type"];
	if(self.authorizationHeader != nil) {
        [request setValue:self.authorizationHeader forHTTPHeaderField:@"Authorization"];
	}
	
	if(messageBody != nil) {
		NSData *body = [messageBody dataUsingEncoding: NSUTF8StringEncoding];
		request.HTTPBody = body;
	}
	
	NSHTTPURLResponse *response;
    NSError *localError;	
	NSData *data = [NSURLConnection sendSynchronousRequest: request returningResponse: &response error: &localError];
    NSInteger code = response.statusCode;
    if (code == STATUS_NO_CONTENT || data == nil) {
        *error = localError;
        return nil;
    }
	NSString *reply = [[NSString alloc] initWithData: data encoding:NSUTF8StringEncoding];
	return reply;
}

- (void)doDeleteInvocation: (NSString *)targetUrl error:(NSError **)error {
	NSURL *url = [NSURL URLWithString: targetUrl];
	NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL: url];
	request.HTTPMethod = @"DELETE";
	if(self.authorizationHeader != nil) {
        [request setValue:self.authorizationHeader forHTTPHeaderField:@"Authorization"];
	}
	NSURLResponse *response = nil;
    NSError *localError;
	NSData *data = [NSURLConnection sendSynchronousRequest: request returningResponse: &response error: &localError];
	*error = localError;
}

@end
