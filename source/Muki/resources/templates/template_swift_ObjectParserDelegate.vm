/**
 * Generated by Muki
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 */
import Foundation

class ObjectParserDelegate : NSObject, NSXMLParserDelegate {
    
    var parent: ObjectParserDelegate?
    var child: ObjectParserDelegate?

    convenience init(parent: ObjectParserDelegate?, aParser: NSXMLParser) {
        self.init()
        self.parent = parent
        aParser.delegate = self
    }
    
    func toBool(aString: String?) -> Bool {
        if (aString == nil) {
            return false
        } else if (aString == "true") {
            return true
        } else {
            return false
        }
    }
    
    func toInt(aString: String?) -> Int {
        if (aString == nil) {
            return 0
        } else {
            let value = (aString! as NSString).integerValue
            return value
        }
    }
    
    func toInt64(aString: String?) -> Int64 {
        if (aString == nil) {
            return 0
        } else {
            let value = (aString! as NSString).longLongValue
            return value
        }
    }
    
    func toDouble(aString: String?) -> Double {
        if (aString == nil) {
            return 0.0
        } else {
            let value = (aString! as NSString).doubleValue
            return value
        }
    }
    
    func injectObjectIntoParent() {
    }
    
    func initObject() {
    }
    
    func parser(parser: NSXMLParser, foundCharacters string: String?) {
    }
    
    func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName: String?, attributes attributeDict: [NSObject : AnyObject]) {
    }
    
    func parser(parser: NSXMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {
    }
       
}