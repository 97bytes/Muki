/**
 * Generated by Muki $helper.getMukiVersion()
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 *
 */
#import "ObjectParserDelegate.h"
$helper.getParserImplementationImportDeclarations( $type )

@implementation $helper.getParserInterfaceName( $type)

- (id)init {
    self = [super init];
    return self;
}

- (void)initObject {
    self.object = [[$type.name alloc] init];
}

#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
$helper.getParserInjectMethodDeclaration( $attribute ) {
    $helper.getParserInjectMethodBody( $attribute );
}

#end
#end
#foreach( $attribute in $type.listAttr )
$helper.getParserInjectMethodDeclaration( $attribute ) {
    $helper.getParserInjectMethodBody( $attribute );
}

#end
- (void)parser: (NSXMLParser *)parser foundCharacters:(NSString *)string {
    if (![self currentStringValue]) {
        self.currentStringValue = [[NSMutableString alloc] initWithCapacity: 50];
    }
    [self.currentStringValue appendString: string];
}

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict {
    if ( [elementName isEqualToString: @"$helper.toLowerCase( $type.name )"] ) {
        [self initObject];
        NSString *value = nil;
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isPrimitiveType( $attribute.type ) && !$helper.isStringType( $attribute.type ) )
        value = [attributeDict objectForKey: @"$attribute.name"];
        if (value) {
            $helper.getDidStartElementAssigmentExpression( $attribute );
        }
#end
#end
        return;
    }
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isStringType( $attribute.type ) )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
        return;
    }
#end
#end
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
    	$helper.getParserInterfaceName( $attribute ) *delegate = [[$helper.getParserInterfaceName( $attribute ) alloc] initWithParent: self selector: @selector($helper.getParserInjectSelectorNameFor( $attribute )) parser: parser];
    	self.child = delegate; // Keep reference to avoid the object to be deallocated before processing
        [delegate parser: parser didStartElement: @"$helper.toLowerCase( $attribute.type )" namespaceURI: namespaceURI qualifiedName: qName attributes: attributeDict];
        return;
    }
#end
#end
#foreach( $attribute in $type.listAttr )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
        $helper.getParserInterfaceName( $attribute ) *delegate = [[$helper.getParserInterfaceName( $attribute ) alloc] initWithParent: self selector: @selector($helper.getParserInjectSelectorNameFor( $attribute )) parser: parser];
    	self.child = delegate; // Keep reference to avoid the object to be deallocated before processing
        return;
    }
#end

}

- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName {
    if ( [elementName isEqualToString: @"$helper.toLowerCase( $type.name )"] ) {
        if (self.parent != nil) {
            [self injectObjectIntoParent];
        }
        return;
    }   
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isStringType( $attribute.type ) )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
        $helper.getDidEndElementAssigmentExpression( $attribute );
        self.currentStringValue = nil;
        return;
    }
#end
#end
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
        return;
    }
#end
#end
#foreach( $attribute in $type.listAttr )
    if ( [elementName isEqualToString: @"$attribute.name"] ) {
        return;
    }
#end
    if (self.parent != nil) {
        [self injectObjectIntoParent];
        parser.delegate = self.parent;
        [[self parent] parser: parser didEndElement: elementName namespaceURI: namespaceURI qualifiedName: qName];
    }
}

- (void)injectObjectIntoParent {
	if(self.object == nil) {
		return;
	}
	NSMethodSignature *aSignature = [self.parent.class instanceMethodSignatureForSelector: self.callbackSelector];
	NSInvocation *anInvocation = [NSInvocation invocationWithMethodSignature: aSignature];
	anInvocation.selector = self.callbackSelector;
	anInvocation.target = self.parent;
	NSObject __unsafe_unretained *param = self.object;
	[anInvocation setArgument: &param atIndex: 2];
	[anInvocation invoke];
	self.object = nil;
}

@end

