/**
 * Generated by Muki $helper.getMukiVersion()
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 */
import Foundation
 
class XmlSerializer : NSObject {

    var xmlOutput = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"

#foreach( $type in $definitions.model )
$helper.getXmlSerializerSerializeMethod( $type )
$helper.getXmlSerializerSerializeElementMethod( $type )
#end

    /**
     * Private methods
     */
    func openElement(elementName: String, attributes: [XmlAttribute]) {
        if (attributes.count == 0) {
            self.openElement(elementName)
            return
        }
        self.xmlOutput = self.xmlOutput + "<" + elementName
        for anAttribute in attributes {
            self.xmlOutput = self.xmlOutput + " " + anAttribute.name + "=\"" + anAttribute.data + "\""
        }
        self.xmlOutput = self.xmlOutput + ">"
    }
    
    func openElement(elementName: String) {
        self.xmlOutput = self.xmlOutput + "<" + elementName + ">"
    }
    
    func closeElement(elementName: String) {
        self.xmlOutput = self.xmlOutput + "</" + elementName + ">"
    }
    
    /**
     * Returns a copy of the input string, where the invalid XML chars are escaped (encoded).
     * Invalid XML chars are: '<', '>', '"', ''', '&'.
     * This is necessary to prevent parsing errors later on.
     */
     func encodeString(input: String?) -> String {
        if (input == nil) {
            return ""
        }
        var result = self.replaceString(input!, target: "&", withString: "&amp;")
        result = self.replaceString(result, target: "<", withString: "&lt;")
        result = self.replaceString(result, target: ">", withString: "&gt;")
        result = self.replaceString(result, target: "\"", withString: "&quot;")
        result = self.replaceString(result, target: "'", withString: "&apos;")
        return result
    }
    
    func replaceString(source: String, target: String, withString: String) -> String {
        var result = source.stringByReplacingOccurrencesOfString(target, withString: withString, options: NSStringCompareOptions.LiteralSearch, range: nil)
        return result
    }
    
}
