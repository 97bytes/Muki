/**
 * Generated by Muki $helper.getMukiVersion()
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 *
 */
$helper.getControllerStubImplImportDeclarations( $definitions, $controller )
#import "XmlSerializer.h"
#import "JsonSerializer.h"
#import "JsonDeserializer.h"
#import "NSDataBase64.h"

@implementation $helper.getControllerStubInterfaceName( $controller )

#foreach( $operation in $controller.getOperation )
$helper.getControllerStubInterfaceMethodDeclaration( $operation ) {
    $helper.getControllerStubImplementationMethodBody( $operation )
}

#end
#foreach( $operation in $controller.postOperation )
$helper.getControllerStubInterfaceMethodDeclaration( $operation ) {
    $helper.getControllerStubImplementationMethodBody( $operation )
}

#end
#foreach( $operation in $controller.putOperation )
$helper.getControllerStubInterfaceMethodDeclaration( $operation ) {
    $helper.getControllerStubImplementationMethodBody( $operation )
}

#end
#foreach( $operation in $controller.deleteOperation )
$helper.getControllerStubInterfaceMethodDeclaration( $operation ) {
    $helper.getControllerStubImplementationMethodBody( $operation )
}

#end
/**
 * Private methods
 */
 #foreach( $type in $definitions.model )
#set($parserClassName = $helper.getParserInterfaceName( $type ))
- ($type.name*)deserializeXml$type.name: (NSString *)xml {
    $parserClassName *delegate = [$parserClassName alloc];
	NSData *xmlData = [xml dataUsingEncoding: NSUTF8StringEncoding];
	NSXMLParser *parser = [[NSXMLParser alloc] initWithData: xmlData];
    parser.delegate = delegate;
	BOOL success = [parser parse];
    if (success == NO) {
        return nil;
    }
	$type.name *object = delegate.object;
	return object;
}

#end
#foreach( $type in $definitions.model )
#set($parserClassName = $helper.getParserInterfaceName( $type ))
- (NSString*)serializeXml$type.name: ($type.name *)anObject {
	XmlSerializer *generator = [[XmlSerializer alloc] init];
	[generator serialize$type.name: anObject];
	NSString *xml = generator.xmlOutput;
	return xml;
}

#end
#foreach( $type in $definitions.model )
#set($parserClassName = $helper.getJsonDeserializerInterfaceName( $type ))
- ($type.name*)deserializeJson$type.name: (NSString *)json {
    JsonDeserializer *deserializer = [[JsonDeserializer alloc] init];
    $type.name *result = [deserializer deserialize$type.name:json];
    return result;
}

#end
#foreach( $type in $definitions.model )
#set($parserClassName = $helper.getJsonSerializerInterfaceName( $type ))
- (NSString *)serializeJson$type.name: ($type.name*)anObject {
    JsonSerializer *serializer = [[JsonSerializer alloc] init];
    NSString *result = [serializer serialize$type.name:anObject];
    return result;
}

#end

@end