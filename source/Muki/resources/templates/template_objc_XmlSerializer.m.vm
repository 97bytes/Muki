/**
 * Generated by Muki $helper.getMukiVersion()
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 *
 */
#import "XmlSerializer.h"
#import "XmlAttribute.h"

@implementation XmlSerializer

@synthesize xmlOutput;

- (id)init {
    self = [super init];
	self.xmlOutput = [[NSMutableString alloc] initWithString: @"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"];
    return self;
}

#foreach( $type in $definitions.model )
$helper.getXmlSerializerSerializeMethodDeclaration( $type ) {
    $helper.getXmlSerializerSerializeMethodBody( $type );
}

$helper.getXmlSerializerSerializeElementMethodDeclaration( $type ) {
    $helper.getXmlSerializerSerializeElementMethodBody( $type )
}

#end

/**
 * Private methods
 */
- (void)openElement: (NSString *)elementName attributes: (NSMutableArray *)attributes {
	if([attributes count] == 0) {
		[self openElement: elementName];
		return;
	}
	[self.xmlOutput appendString: [NSString stringWithFormat: @"<%@", elementName]];
	for (XmlAttribute *anAttribute in attributes) {
		[self.xmlOutput appendString: [NSString stringWithFormat: @" %@=\"%@\"", anAttribute.name, anAttribute.value]];
	}
	[self.xmlOutput appendString: @">"];
}

- (void)openElement: (NSString *)elementName {
	[self.xmlOutput appendString: [NSString stringWithFormat: @"<%@>", elementName]];
}

- (void)closeElement: (NSString *)elementName {
	[self.xmlOutput appendString: [NSString stringWithFormat: @"</%@>", elementName]];
}

/**
 * Returns a copy of the input string, where the invalid XML chars are escaped (encoded).
 * Invalid XML chars are: '<', '>', '"', ''', '&'.
 * This is necessary to prevent parsing errors later on.
 */
- (NSString*)encodeString:(NSString*)input {
    if (input == nil) {
        return nil;
    }
    NSString *result = [input stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"];
    result = [result stringByReplacingOccurrencesOfString:@"<" withString:@"&lt;"];
    result = [result stringByReplacingOccurrencesOfString:@">" withString:@"&gt;"];
    result = [result stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"];
    result = [result stringByReplacingOccurrencesOfString:@"'" withString:@"&apos;"];
    return result;
}

@end
