/**
 * Generated by Muki $helper.getMukiVersion()
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 */
import Foundation

class $helper.getParserName( $type ) : ObjectParserDelegate {
    
    $helper.getParserObjectDeclaration( $type )
    var currentStringValue = ""
    $helper.getParserCallbackDeclaration( $type )
    
$helper.getParserCallbackConstructor( $type )

$helper.getParserInitObjectMethod( $type )

    override func injectObjectIntoParent() {
        if (self.object != nil) {
            self.containerCallback!(self.object!)
        }
        self.object = nil
    }    
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
$helper.getParserInjectMethod( $attribute )
#end

#end
#foreach( $attribute in $type.listAttr )
$helper.getParserInjectMethod( $attribute )

#end  
    override func parser(parser: NSXMLParser, foundCharacters string: String?) {
        if (string != nil) {
            self.currentStringValue = self.currentStringValue + string!
        }
    }

    override func parser(parser: NSXMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName: String?, attributes attributeDict: [NSObject : AnyObject]) {
        if ( elementName == "$helper.toLowerCase( $type.name )") {
            self.initObject()
            var value: String?
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isPrimitiveType( $attribute.type ) && !$helper.isStringType( $attribute.type ) )
            value = attributeDict["$attribute.name"] as? String
            if (value != nil) {
               $helper.getDidStartElementAssigmentExpression( $attribute )
            }
#end
#end
            return
        }    
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isStringType( $attribute.type ) )
        if ( elementName == "$attribute.name" ) {
            return
        }
#end
#end
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
        if ( elementName == "$attribute.name" ) {
            $helper.getParserChildDelegateDeclaration( $attribute )
            self.child = delegate // Keep reference to avoid the object to be deallocated before processing
            delegate.parser(parser, didStartElement: "$helper.toLowerCase( $attribute.type )", namespaceURI: namespaceURI, qualifiedName: qualifiedName, attributes: attributeDict)
            return
        }
#end
#end
#foreach( $attribute in $type.listAttr )
        if ( elementName == "$attribute.name" ) {
            $helper.getParserChildDelegateDeclaration( $attribute )
            self.child = delegate; // Keep reference to avoid the object to be deallocated before processing
            return
        }
#end
    }

    override func parser(parser: NSXMLParser, didEndElement elementName: String, namespaceURI: String?, qualifiedName qName: String?) {
        if ( elementName == "$helper.toLowerCase( $type.name )" ) {
            if (self.parent != nil) {
                self.injectObjectIntoParent()
            }
            return
        }   
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isStringType( $attribute.type ) )
        if ( elementName == "$attribute.name" ) {
            $helper.getDidEndElementAssigmentExpression( $attribute )
            self.currentStringValue = ""
            return
        }
#end
#end
#foreach( $attribute in $type.simpleAttr )
#if( $helper.isComplexType( $attribute.type ) )
        if ( elementName == "$attribute.name" ) {
            return
        }
#end
#end
#foreach( $attribute in $type.listAttr )
        if ( elementName == "$attribute.name" ) {
            return
        }
#end
        if ( self.parent != nil ) {
            self.injectObjectIntoParent()
            parser.delegate = self.parent
            self.parent!.parser(parser, didEndElement: elementName, namespaceURI: namespaceURI, qualifiedName: qName)
        }
    }

}

