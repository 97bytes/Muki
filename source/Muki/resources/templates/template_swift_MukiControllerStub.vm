/**
 * Generated by Muki
 * This class has been automatically generated from a template. 
 * Do not change it manually. Instead, change the model and run the generation process again!
 */
import Foundation
 
class MukiControllerStub {

    static let STATUS_NOT_FOUND = 404
    static let STATUS_NO_CONTENT = 204
    var controllerUrl = ""
    var userName: String?
    var password: String?
    var authorizationHeader: String?

	convenience init(url: String) {
        self.init()
        self.controllerUrl = url
    }
	
	convenience init(url: String, userName: String?, password: String?) {
        self.init()
        self.controllerUrl = url
        self.userName = userName
        self.password = password
        if (userName == nil || password == nil) {
            self.authorizationHeader = nil
        } else {
            let loginString = userName! + ":" + password!
            let loginData = loginString.dataUsingEncoding(NSASCIIStringEncoding)
            let base64Login = loginData?.base64EncodedStringWithOptions(nil)
            self.authorizationHeader = "Basic " + base64Login!
        }
    }
    
    func doGetInvocation(targetUrl: String, contentType: String, error outError: NSErrorPointer) -> String? {
        let url = NSURL(string: targetUrl)
        var request = NSMutableURLRequest(URL: url!)
        request.HTTPMethod = "GET"
        request.setValue(contentType, forHTTPHeaderField: "Content-type")
        if (self.authorizationHeader != nil) {
            request.setValue(self.authorizationHeader!, forHTTPHeaderField: "Authorization")
        }
        
        var response: NSURLResponse?
        let data: NSData? = NSURLConnection.sendSynchronousRequest(request, returningResponse: &response, error: outError)
        if let httpResponse = response as? NSHTTPURLResponse {
            let code = httpResponse.statusCode
            if (code == MukiControllerStub.STATUS_NOT_FOUND || data == nil) {
                return nil
            } else {
                let reply = NSString(data: data!, encoding:NSUTF8StringEncoding) as String?
                return reply
            }
        } else {
            return nil
        }

    }

    func doPostInvocation(targetUrl: String, messageBody: String?, contentType: String, error outError: NSErrorPointer) -> String? {
        let url = NSURL(string: targetUrl)
        var request = NSMutableURLRequest(URL: url!)
        request.HTTPMethod = "POST"
        request.setValue(contentType, forHTTPHeaderField: "Content-type")
        if (self.authorizationHeader != nil) {
            request.setValue(self.authorizationHeader!, forHTTPHeaderField: "Authorization")
        }
        
        if (messageBody != nil) {
            let body = messageBody?.dataUsingEncoding(NSUTF8StringEncoding)
            request.HTTPBody = body
        }
        
        var response: NSURLResponse?
        let data: NSData? = NSURLConnection.sendSynchronousRequest(request, returningResponse: &response, error: outError)
        if let httpResponse = response as? NSHTTPURLResponse {
            let code = httpResponse.statusCode
            if (code == MukiControllerStub.STATUS_NO_CONTENT || data == nil) {
                return nil
            } else {
                let reply = NSString(data: data!, encoding:NSUTF8StringEncoding) as String?
                return reply
            }
        } else {
            return nil
        }
        
    }
 
    func doPutInvocation(targetUrl: String, messageBody: String?, contentType: String, error outError: NSErrorPointer) -> String? {
        let url = NSURL(string: targetUrl)
        var request = NSMutableURLRequest(URL: url!)
        request.HTTPMethod = "PUT"
        request.setValue(contentType, forHTTPHeaderField: "Content-type")
        if (self.authorizationHeader != nil) {
            request.setValue(self.authorizationHeader!, forHTTPHeaderField: "Authorization")
        }
        
        if (messageBody != nil) {
            let body = messageBody?.dataUsingEncoding(NSUTF8StringEncoding)
            request.HTTPBody = body
        }
        
        var response: NSURLResponse?
        let data: NSData? = NSURLConnection.sendSynchronousRequest(request, returningResponse: &response, error: outError)
        if let httpResponse = response as? NSHTTPURLResponse {
            let code = httpResponse.statusCode
            if (code == MukiControllerStub.STATUS_NO_CONTENT || data == nil) {
                return nil
            } else {
                let reply = NSString(data: data!, encoding:NSUTF8StringEncoding) as String?
                return reply
            }
        } else {
            return nil
        }
        
    }
 
    func doDeleteInvocation(targetUrl: String, error outError: NSErrorPointer) {
        let url = NSURL(string: targetUrl)
        var request = NSMutableURLRequest(URL: url!)
        request.HTTPMethod = "DELETE"
        if (self.authorizationHeader != nil) {
            request.setValue(self.authorizationHeader!, forHTTPHeaderField: "Authorization")
        }
        
        var response: NSURLResponse?
        var localError: NSError?
        let data: NSData? = NSURLConnection.sendSynchronousRequest(request, returningResponse: &response, error: outError)
    }
    
}
